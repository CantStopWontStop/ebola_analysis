---
title: "Ebola Analysis"
format:
    html:
        highlight-style: zenburn
        number-sections: true
        theme: litera
        toc: true
        code-fold: false
editor: visual
execute: 
  warning: false
---

# Set up

```{r}
library(tidyverse)
library(readxl) #library(haven)
library(gt)
library(epiR)

theme_set(theme_minimal())
```

```{r}

ebola_data_raw <-  read_xlsx('Ebola_Sierra Leone.xlsx')

ebola_data_raw

```

```{r}
ebola_data <- ebola_data_raw %>% 
    mutate(
        sex = factor(sex, 
                     levels = c(1,2),
                     labels = c("female", "male")),
        status = factor(status,
                        levels = c(1,0),
                        labels = c("positive", "negative") ),       # Convert to factor
        # Create 'age_group' based on the 'age' column
        age_group = case_when(
            age < 5 ~ "0-4", 
            age >= 5 & age < 15 ~ "5-14",
            age >= 15 & age < 25 ~ "15-24",
            age >= 25 & age < 45 ~ "25-44",
            age >= 45 & age < 65 ~ "45-64",
            age >= 65 ~ "65+",
            TRUE ~ NA_character_  # Handle missing values by assigning NA
        ),
        # Convert 'age_group' to factor with specified order
        age_group = factor(age_group, 
                           levels = c("0-4", 
                                      "5-14", 
                                      "15-24", 
                                      "25-44", 
                                      "45-64", 
                                      "65+")
                           )

    )

ebola_data
```

# Contingency Tables

```{r}

contingency_table <- table(ebola_data$sex, ebola_data$status)

contingency_table
```

# Chi-Square Tests

```{r}

chisq.test(contingency_table)
```

# Odds Ratios

```{r}

epi.2by2(contingency_table, method = 'case.control' )
```

# Logistic Regression

```{r}

logistic_model <- glm(status ~ sex, 
                   data = ebola_data, 
                   family = binomial)

# Print the logistic regression model summary
summary(logistic_model)
```

```{r}

exp(cbind(OR = coef(logistic_model), confint(logistic_model)))

```

```{=html}
<iframe width="560" height="315" src="https://www.youtube.com/embed/C4N3_XJJ-jU?si=X4hr_RwHuqmhVFB1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
```
# Review

## Head and Tail Functions

```{r}
ebola_data %>% 
    arrange(desc(age)) %>% 
    head()
```

```{r}
ebola_data %>% 
    drop_na(age) %>% 
    arrange(age) %>% 
    tail()
```

## Summary Function

```{r}

ebola_data %>%
    summary()
```

```{r}
ebola_data$age %>% 
    summary()


summary(ebola_data$age)
```

## Summarise Function

```{r}

ebola_data %>% 
    summarise( mean_age = mean(age, na.rm = TRUE),
               median_age = median(age, na.rm =TRUE),
               sd_age = sd(age, na.rm = TRUE),
               min_age = min(age, na.rm = TRUE),
               max_age = max(age, na.rm = TRUE))
```

```{r}
ebola_data %>% 
    summarize(count = n(), 
              age_years = sum(age, na.rm = TRUE))
```

### Summarise and Group_by Functions

```{r}
 
ebola_data %>% 
    # group my data by district
    
    group_by(district)  %>% 
    summarize(count = n(),
              max_age = max(age, na.rm = TRUE)
              )
```

```{r}

ebola_data %>% 
    drop_na(sex) %>% 
    group_by(district, sex) %>% 
    summarise(count = n(), 
              max_age = max(age, na.rm = TRUE))  # %>% 
    # arrange( %>% desc())
```

The number of positive and negative cases for each district.

```{r}
ebola_data %>% 
    drop_na() %>% 
    group_by(district, status) %>% 
    summarise(count = n())
```

The number of positive and negative cases for male and female.

```{r}

ebola_data %>% 
    drop_na() %>% 
   group_by(status, sex) %>% 
    summarise(count = n())
```

## Table and Prop.Table Functions

```{r}

contingency_table <- table(ebola_data$sex, ebola_data$status)

contingency_table
```

```{r}

prop.table(contingency_table)
```

## Proportion Table Using Dplyr

### Un-grouped vs Grouped

```{r}
ebola_data %>% 
    drop_na() %>% 
    group_by(sex, status) %>% 
    summarise(freq = n() ) %>% 
    ungroup() %>% 
    mutate(prop = freq / sum(freq),
           percent = prop * 100)
```

```{r}

ebola_data %>% 
    drop_na() %>% 
    group_by(sex, status) %>% 
    summarise(freq = n() ) %>% 
 #   ungroup() %>% 
    mutate(prop = freq / sum(freq),
           percent = prop * 100)
```

## Visualization

### Histogram

```{r}

ebola_data %>% 
    ggplot(aes(x = age)) + 
    geom_histogram(aes(fill = sex), color = "black") +
    labs(title = "Distrubition of Ebola Data by Age",
         x  = "Age",
         y = "Frequency") +
    scale_x_continuous(limits = c(0, 100), 
                       breaks = c(0, 10, 20, 30, 40, 
                                  50, 60, 70,80, 90,100)) +
    theme_minimal()
```

```{r}

ebola_data %>% 
    ggplot(aes(x = age)) + 
    geom_histogram(aes(fill = age_group), color = "black") +
    labs(title = "Distrubition of Ebola Data by Age",
         x  = "Age",
         y = "Frequency") +
    scale_x_continuous(limits = c(0, 100), 
                       breaks = c(0, 10, 20, 30, 40, 
                                  50, 60, 70,80, 90,100)) +
    theme_minimal()
```

#### Facet Wrap

```{r}

ebola_data %>% 
    ggplot(aes(x = age)) + 
    geom_histogram(aes(fill = sex), color = "black") +
    labs(title = "Distrubition of Ebola Data by Age",
         x  = "Age",
         y = "Frequency") +
    scale_x_continuous(limits = c(0, 100), 
                       breaks = c(0, 10, 20, 30, 40, 
                                  50, 60, 70,80, 90,100)) +
    facet_wrap(~status) +
    theme_minimal()
```

### Boxplots

#### Setting Color Uniformly

```{r}

ebola_data %>% 
    drop_na(sex) %>% 
    ggplot(aes(y = age, x = sex)) +
    geom_boxplot(fill = "orange")
```

#### Mapping Colors to a Variable

```{r}

ebola_data %>% 
    drop_na(sex) %>% 
    ggplot(aes(y = age, x = sex)) +
    geom_boxplot(aes(fill = sex))
```

#### Scaling to Customize Colors

```{r}


ebola_data %>% 
    drop_na(sex) %>% 
    ggplot(aes(y = age, x = sex, fill = sex)) +
    geom_boxplot() +
    scale_fill_manual(values = c("pink", "blue")) +
    facet_wrap(~district, ncol = 2)
```

### Pie Chart

```{r}

sex_data <- ebola_data %>% 
    group_by(sex) %>% 
    summarise(count = n()) %>% 
    mutate(prop = count / sum(count))

sex_data
```

```{r}
sex_data %>% 
    ggplot(aes(x= "", y= prop, fill = sex)) +
    geom_bar(stat = 'identity') +
    coord_polar("y") +
    theme_void() 
```

### Scatter Plots

```{r}

ebola_data %>% 
    drop_na() %>% 
    filter(age >= 65) %>% 
    ggplot(aes(x = date_of_onset, 
               y = date_of_sample, 
               colour = age)) +
    geom_point(aes(size = age),
               alpha = .2) 
```

```{r}

ebola_data %>% 
    drop_na() %>% 
    filter(age >= 65) %>% 
    ggplot(aes(x = date_of_onset, 
               y = date_of_sample, 
               colour = age)) +
    geom_point(alpha = .2) +
    facet_wrap(~sex)
```

# Resources

-   [R for Data Science](https://jrnold.github.io/r4ds-exercise-solutions/)

-   [Statistical Inference via Data Science](https://moderndive.com/)

-   [Working with Quarto](https://quarto.org/docs/guide/)

-   ggplot2

    -   [Textbook](https://ggplot2-book.org/)

    -   [Gallery](https://r-graph-gallery.com/)
